.TH OPENFORTIVPN 1 "May 4, 2020" ""

.SH NAME
openfortivpn \- Client for PPP+SSL VPN tunnel services

.SH SYNOPSIS
.B openfortivpn
[\fI<host>\fR[:\fI<port>\fR]]
[\fB\-u\fR \fI<user>\fR]
[\fB\-p\fR \fI<pass>\fR]
[\fB\-\-otp=\fI<otp>\fR]
[\fB\-\-otp\-prompt=\fI<prompt>\fR]
[\fB\-\-otp\-delay=\fI<delay>\fR]
[\fB\-\-no\-ftm\-push\fR]
[\fB\-\-realm=\fI<realm>\fR]
[\fB\-\-ifname=\fI<interface>\fR]
[\fB\-\-set\-routes=<bool>\fR]
[\fB\-\-no\-routes\fR]
[\fB\-\-set\-dns=<bool>\fR]
[\fB\-\-no\-dns\fR]
[\fB\-\-half\-internet\-routes=<bool>\fR]
[\fB\-\-ca\-file=\fI<file>\fR]
[\fB\-\-user\-cert=\fI<file>\fR]
[\fB\-\-user-cert=\fIpkcs11:\fR]
[\fB\-\-user\-key=\fI<file>\fR]
[\fB\-\-use\-syslog\fR]
[\fB\-\-trusted\-cert=\fI<digest>\fR]
[\fB\-\-insecure\-ssl\fR]
[\fB\-\-cipher\-list=\fI<ciphers>\fR]
[\fB\-\-min\-tls=\fI<version>\fR]
[\fB\-\-seclevel\-1\fR]
[\fB\-\-pppd\-use\-peerdns=<bool>\fR]
[\fB\-\-pppd\-no\-peerdns\fR]
[\fB\-\-pppd\-log=\fI<file>\fR]
[\fB\-\-pppd\-plugin=\fI<file>\fR]
[\fB\-\-pppd\-ipparam=\fI<string>\fR]
[\fB\-\-pppd\-ifname=\fI<string>\fR]
[\fB\-\-pppd\-call=\fI<name>\fR]
[\fB\-\-ppp\-system=\fI<string>\fR]
[\fB\-\-use\-resolvconf=\fI<bool>\fR]
[\fB\-\-persistent=\fI<interval>\fR]
[\fB\-c\fR \fI<file>\fR]
[\fB\-v|\-q\fR]
.br
.B openfortivpn
\-\-help
.br
.B openfortivpn
\-\-version

.SH DESCRIPTION
.B openfortivpn
connects to a VPN by setting up a tunnel to the gateway at
\fI<host>\fR:\fI<port>\fR.

.SH OPTIONS
.TP
\fB\-\-help\fR
Show the help message and exit.
.TP
\fB\-\-version\fR
Show version and exit.
.TP
\fB\-c \fI<file>\fR, \fB\-\-config=\fI<file>\fR
Specify a custom config file (default: @SYSCONFDIR@/openfortivpn/config).
.TP
\fB\-u \fI<user>\fR, \fB\-\-username=\fI<user>\fR
VPN account username.
.TP
\fB\-p \fI<pass>\fR, \fB\-\-password=\fI<pass>\fR
VPN account password.
.TP
\fB\-o \fI<otp>\fR, \fB\-\-otp=\fI<otp>\fR
One-Time-Password.
.TP
\fB\-\-otp\-prompt=\fI<prompt>\fR
Search for the OTP password prompt starting with the string \fI<prompt>\fR.
.TP
\fB\-\-otp\-delay\=\fI<delay>\fR
Set the amount of time to wait before sending the One-Time-Password.
The delay time must be specified in seconds, where 0 means
no wait (this is the default).
.TP
\fB\-\-no\-ftm\-push\fR
Do not use FTM push if the server provides the option.
The server may be configured to allow two factor authentication through a
push notification to the mobile application. If this option is provided,
authentication based on OTP will be used instead.
.TP
\fB\-\-realm=\fI<realm>\fR
Connect to the specified authentication realm. Defaults to empty, which
is usually what you want.
.TP
\fB\-\-ifname=\fI<interface>\fR
Bind the connection to the specified network interface.
.TP
\fB\-\-set\-routes=\fI<bool>\fR, \fB\-\-no-routes\fR
Set if openfortivpn should try to configure IP routes through the VPN when
tunnel is up. If used multiple times, the last one takes priority.

\fB\-\-no\-routes\fR is the same as \fB\-\-set-routes=\fI0\fR.
.TP
\fB\-\-half\-internet\-routes=\fI<bool>\fR
Set if openfortivpn should add two 0.0.0.0/1 and 128.0.0.0/1 routes with
higher priority instead of replacing the default route.
.TP
\fB\-\-set\-dns=\fI<bool>\fR, \fB\-\-no\-dns\fR
Set if openfortivpn should add DNS name servers in /etc/resolv.conf when
tunnel is up. Also a dns\-suffix may be received from the peer and added
to /etc/resolv.conf in the turn of adding the name servers.
resolvconf is instructed to do the update of the resolv.conf file
if it is installed and \-\-use\-resolvconf is activated, otherwise openfortivpn
prepends its changes to the existing content of the resolv.conf file.
Note that there may be other mechanisms to update /etc/resolv.conf,
e.g., \fB\-\-pppd\-use\-peerdns\fR in conjunction with an ip-up-script,
which may require that openfortivpn is called with \fB\-\-no\-dns\fR.
\fB\-\-no\-dns\fR is the same as \fB\-\-set\-dns=\fI0\fR.
.TP
\fB\-\-use\-resolvconf=\fI<bool>\fR
Set if openfortivpn should use resolvconf to add DNS name servers
in /etc/resolv.conf. If it is set to false, the builtin fallback
mechanism is used even if resolvconf is available.
.TP
\fB\-\-ca\-file=\fI<file>\fR
Use specified PEM-encoded certificate bundle instead of system-wide store to
verify the gateway certificate.
.TP
\fB\-\-user\-cert=\fI<file>\fR
Use specified PEM-encoded certificate if the server requires authentication
with a certificate.
.TP
\fB\-\-user-cert=\fIpkcs11:\fR
Use at least the string pkcs11: for using a smartcard. It takes the full
or a partial PKCS11-URI (p11tool --list-token-urls)

  --user-cert = pkcs11:

  --user-cert = pkcs11:token=someuser

  --user-cert = pkcs11:model=PKCS%2315%20emulated;manufacturer=piv_II;serial=012345678;token=someuser

\fBThis feature requires the OpenSSL PKCS engine!
.TP
\fB\-\-user\-key=\fI<file>\fR
Use specified PEM-encoded key if the server requires authentication with
a certificate.
.TP
\fB\-\-use\-syslog\fR
Log to syslog instead of terminal.
.TP
\fB\-\-trusted\-cert=\fI<digest>\fR
Trust a given gateway. If classical SSL certificate validation fails, the
gateway certificate will be matched against this value. \fI<digest>\fR is the
X509 certificate's sha256 sum. The certificate has to be encoded in DER form.
This option can be used multiple times to trust several certificates.
.TP
\fB\-\-insecure\-ssl\fR
Do not disable insecure SSL protocols/ciphers.
If your server requires a specific cipher, consider using \fB\-\-cipher\-list\fR
instead.
.TP
\fB\-\-cipher\-list=\fI<ciphers>\fR
OpenSSL ciphers to use. If default does not work, you can try alternatives
such as HIGH:!MD5:!RC4 or as suggested by the Cipher: line in the output of
\fBopenssl\fP(1) (e.g. AES256-GCM-SHA384):

$ openssl s_client -connect \fI<host:port>\fR

(default: HIGH:!aNULL:!kRSA:!PSK:!SRP:!MD5:!RC4)

\fBApplies to TLS v1.2 or lower only, not to be used with TLS v1.3 ciphers.\fR
.TP
\fB\-\-min\-tls=\fI<version>\fR
Use minimum TLS version instead of system default. Valid values are 1.0,
1.1, 1.2, 1.3.
.TP
\fB\-\-seclevel\-1\fR
If \fB\-\-cipher-list\fR is not specified, add @SECLEVEL=1 to the list of
ciphers. This lowers limits on dh key.

\fBApplies to TLS v1.2 or lower only.\fR
.TP
\fB\-\-use\-peer\-dns=\fI<bool>\fR, \fB\-\-pppd\-no\-peerdns\fR
Whether to ask peer ppp server for DNS server addresses and let pppd
rewrite /etc/resolv.conf. There is no mechanism to tell the dns\-suffix
to pppd. If the DNS server addresses are requested,
also \fB\-\-set\-dns=\fI1\fR may race with the mechanisms in pppd.

\fB\-\-pppd\-no\-peerdns\fR is the same as \fB\-\-pppd\-use\-peerdns=\fI0\fR.
.TP
\fB\-\-pppd\-log=\fI<file>\fR
Set pppd in debug mode and save its logs into \fI<file>\fR.
.TP
\fB\-\-pppd\-plugin=\fI<file>\fR
Use specified pppd plugin instead of configuring the resolver and routes
directly.
.TP
\fB\-\-pppd\-ipparam=\fI<string>\fR
Provides an extra parameter to the ip\-up, ip\-pre\-up and ip\-down scripts. See man
.BR pppd(8)
for further details
.TP
\fB\-\-pppd\-ifname=\fI<string>\fR
Set the ppp interface name. Only if supported by pppd. Patched versions of pppd
implement this option but may not be available on your platform.
.TP
\fB\-\-pppd\-call=\fI<name>\fR
Drop usual arguments from pppd command line and add `call <name>' instead.
This can be useful on Debian and Ubuntu, where unprivileged users in
group `dip' can invoke `pppd call <name>' to make pppd read and apply
options from /etc/ppp/peers/<name> (including privileged ones).
.TP
\fB\-\-ppp\-system=\fI<string>\fR
Only available if compiled for ppp user space client (e.g. on FreeBSD).
Connect to the specified system as defined in /etc/ppp/ppp.conf
.TP
\fB\-\-persistent\=\fI<interval>\fR
Run the VPN persistently in an endless loop and try to reconnect forever.
The reconnect interval may be specified in seconds, where 0 means
no reconnect is done (this is the default).
.TP
\fB\-v\fR
Increase verbosity. Can be used multiple times to be even more verbose.
.TP
\fB\-q\fR
Decrease verbosity. Can be used multiple times to be even less verbose.

.SH ENVIRONMENT and proxy support
.B openfortivpn
can be run behind an HTTP proxy that supports the HTTP connect command.
It checks if one of the environment variables
.B https_proxy HTTPS_PROXY all_proxy ALL_PROXY
is set which are supposed to contain a string of the format
.br
.B http://[host]:[port]
.br
where
.B [host]
is the ip or the fully qualified host name of the proxy server
.B [port]
is the TCP port number where the proxy is listening for
incoming connections. If one of these variables is defined,
.B openfortivpn
tries to first establish a TCP connection to this proxy (plain HTTP, not encrypted),
and then makes a request to connect to the VPN host as given on the command line
or in the config file. The proxy is supposed to forward any subsequent packets
transparently to the VPN host, so that the TLS layer of the connection effectively
is established between the client and the VPN host, and the proxy just acts as a
forwarding instance on the lower level of the TCP connection.

The following environment variables are set by
.B openfortivpn
and
.BR pppd(8)
or its scripts can obtain information this way:
.br
VPN_GATEWAY the ip of the gateway host
.br
and for each route three variables are set up, where an integer number
is appended to the variable names, denoting the number of the current route:
.br
VPN_ROUTE_DEST_... the destination network of the route
.br
VPN_ROUTE_MASK_... the network mask for this route
.br
VPN_ROUTE_GATEWAY_... the gateway for the current route entry

If not compiled for pppd the pppd options and features that rely on them are not
available. On FreeBSD \fB\-\-ppp\-system\fR is available instead.

.SH CONFIG FILE
Options can be taken from a configuration file. Options passed in the command
line will override those from the config file, though. The default config file
is @SYSCONFDIR@/openfortivpn/config, but this can be set using the \fB\-c\fR option.
An empty template for the config file is installed to
@DATADIR@/config.template

.TP
A config file looks like:
# this is a comment
.br
host = vpn\-gateway
.br
port = 443
.br
username = foo
.br
password = bar
.br
# realm = some-realm
.br
# useful for a gui that passes a config file to openfortivpn
.br
# otp = 123456
.br
# otp\-delay = 0
.br
# otp\-prompt = Please
.br
# This would disable FTM push notification support, and use OTP instead
.br
# no\-ftm\-push = 1
.br
# pinentry = pinentry program
.br
user\-cert = @SYSCONFDIR@/openfortivpn/user\-cert.pem
.br
# user\-cert = pkcs1: # use smartcard as client certificate
.br
user\-key = @SYSCONFDIR@/openfortivpn/user\-key.pem
.br
# the sha256 digest of the trusted host certs obtained by
.br
# openssl dgst -sha256 server\-cert.crt:
.br
trusted\-cert = certificatedigest4daa8c5fe6c...
.br
trusted\-cert = othercertificatedigest6631bf...
.br
# This would specify a ca bundle instead of system-wide store
.br
# ca\-file = @SYSCONFDIR@/openfortivpn/ca\-bundle.pem
.br
set\-dns = 0
.br
use\-resolvconf = 1
.br
set\-routes = 1
.br
half\-internet\-routes = 0
.br
pppd\-use\-peerdns = 1
.br
# alternatively, use a specific pppd plugin instead
.br
# pppd\-plugin = /usr/lib/pppd/default/some\-plugin.so
.br
# for debugging pppd write logs here
.br
# pppd\-log = /var/log/pppd.log
.br
# pass ppp interface name to pppd (if supported by a patched pppd)
.br
# pppd\-ifname = ppp1
.br
# pass an ipparam string to pppd, e.g. the device name (a similar use case)
.br
# pppd\-ipparam = 'device=$DEVICE'
.br
# instruct pppd to call a script instead of passing arguments (if pppd supports it)
.br
# pppd\-call = script
.br
# use\-syslog = 0
.br
insecure\-ssl = 0
.br
cipher\-list = HIGH:!aNULL:!kRSA:!PSK:!SRP:!MD5:!RC4
.br
persistent = 0
.br
seclevel-1 = 0
